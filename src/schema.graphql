extend type User {
  phone: String
  phoneVerified: Boolean
  firstName: String
  lastName: String
}
extend type Account {
  phone: String
}
extend input CreateUserInput {
  phone: String!
  firstName: String!
  lastName: String!
  otp: String
  govId: [String]
  proofOfAddress: [String]
  UserRole: UserRoleValue
}
enum UserRoleValue {
  admin
  dispatcher
  rider
}

type CreateUserResult {
  id: ID
  phone: String
  firstName: String
  lastName: String
  otp: String
  govId: [String]
  proofOfAddress: [String]
  UserRole: UserRoleValue
}

type phone {
  code: String
  expiry: String
}
type dict {
  code: String
  expiry: String
}
type sendOtpResponse {
  success: Boolean
  dict: dict
}

extend type Mutation {
  checkUserExist(phone: String, email: String): Boolean
  sendOTP(phone: String, email: String): Boolean
  deleteUser(userId: String!): Boolean
  createUserWithOtp(user: CreateUserInput!): CreateUserResult
  verifyOTP(phone: String, otp: String): verifyOTPResponse
  authenticateWithOTP(
    serviceName: String!
    params: AuthenticateParamsInput!
  ): LoginResult
}

type verifyOTPResponse {
  status: Boolean
  response: String
}
